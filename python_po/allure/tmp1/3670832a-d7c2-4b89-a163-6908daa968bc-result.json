{"name": "成功登录场景", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.JavascriptException: Message: javascript error: window.scollBy is not a function\n  (Session info: chrome=114.0.5735.110)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x0069A813+48355]\n\t(No symbol) [0x0062C4B1]\n\t(No symbol) [0x00535358]\n\t(No symbol) [0x005387A1]\n\t(No symbol) [0x0053A19B]\n\t(No symbol) [0x0058D279]\n\t(No symbol) [0x0057A73C]\n\t(No symbol) [0x0058C922]\n\t(No symbol) [0x0057A536]\n\t(No symbol) [0x005582DC]\n\t(No symbol) [0x005593DD]\n\tGetHandleVerifier [0x008FAABD+2539405]\n\tGetHandleVerifier [0x0093A78F+2800735]\n\tGetHandleVerifier [0x0093456C+2775612]\n\tGetHandleVerifier [0x007251E0+616112]\n\t(No symbol) [0x00635F8C]\n\t(No symbol) [0x00632328]\n\t(No symbol) [0x0063240B]\n\t(No symbol) [0x00624FF7]\n\tBaseThreadInitThunk [0x76537BA9+25]\n\tRtlInitializeExceptionChain [0x77DDC3AB+107]\n\tRtlClearBits [0x77DDC32F+191]", "trace": "self = <test_address.TestLogin object at 0x0000029F29C40400>\n\n    @allure.story(\"testcase01\")\n    @allure.title(\"成功登录场景\")\n    def test_login_success(self):\n        with allure.step(\"打开网址\"):\n            driver=webdriver.Chrome()\n            login=LoginPage(driver)\n        with allure.step(\"输入账号\"):\n            login.set_name(\"user123\")\n        with allure.step(\"输入密码\"):\n            login.set_pwd(\"user123\")\n        with allure.step(\"点击登录\"):\n            login.click_btn()\n            sleep(1)\n        with allure.step(\"点击个人信息\"):\n            address_page=AddressPage(driver)\n            address_page.click_name()\n        with allure.step(\"点击收货地址\"):\n            address_page.click_address()\n        with allure.step(\"点击新增\"):\n            address_page.click_add()\n        with allure.step(\"输入收货人\"):\n            address_page.set_shr(\"11111\")\n        with allure.step(\"输入手机号\"):\n            address_page.set_num(\"18012121212\")\n        with allure.step(\"选择地址\"):\n>           address_page.click_address1()\n\ntest1\\test_address.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage1\\address_page.py:32: in click_address1\n    self.driver.execute_script(\"window.scollBy(0,2000);\")\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:491: in execute_script\n    return self.execute(command, {\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:428: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000029F29C403A0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"javascript error\",\"message\":\"javascript error: window.scollBy is not a fu...dInitThunk [0x76537BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77DDC3AB+107]\\\\n\\\\tRtlClearBits [0x77DDC32F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.JavascriptException: Message: javascript error: window.scollBy is not a function\nE         (Session info: chrome=114.0.5735.110)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0069A813+48355]\nE       \t(No symbol) [0x0062C4B1]\nE       \t(No symbol) [0x00535358]\nE       \t(No symbol) [0x005387A1]\nE       \t(No symbol) [0x0053A19B]\nE       \t(No symbol) [0x0058D279]\nE       \t(No symbol) [0x0057A73C]\nE       \t(No symbol) [0x0058C922]\nE       \t(No symbol) [0x0057A536]\nE       \t(No symbol) [0x005582DC]\nE       \t(No symbol) [0x005593DD]\nE       \tGetHandleVerifier [0x008FAABD+2539405]\nE       \tGetHandleVerifier [0x0093A78F+2800735]\nE       \tGetHandleVerifier [0x0093456C+2775612]\nE       \tGetHandleVerifier [0x007251E0+616112]\nE       \t(No symbol) [0x00635F8C]\nE       \t(No symbol) [0x00632328]\nE       \t(No symbol) [0x0063240B]\nE       \t(No symbol) [0x00624FF7]\nE       \tBaseThreadInitThunk [0x76537BA9+25]\nE       \tRtlInitializeExceptionChain [0x77DDC3AB+107]\nE       \tRtlClearBits [0x77DDC32F+191]\n\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: JavascriptException"}, "steps": [{"name": "打开网址", "status": "passed", "start": 1755230316916, "stop": 1755230318382}, {"name": "输入账号", "status": "passed", "start": 1755230318382, "stop": 1755230318567}, {"name": "输入密码", "status": "passed", "start": 1755230318567, "stop": 1755230318677}, {"name": "点击登录", "status": "passed", "start": 1755230318677, "stop": 1755230319725}, {"name": "点击个人信息", "status": "passed", "start": 1755230319725, "stop": 1755230319773}, {"name": "点击收货地址", "status": "passed", "start": 1755230319773, "stop": 1755230319894}, {"name": "点击新增", "status": "passed", "start": 1755230319894, "stop": 1755230320160}, {"name": "输入收货人", "status": "passed", "start": 1755230320160, "stop": 1755230320247}, {"name": "输入手机号", "status": "passed", "start": 1755230320247, "stop": 1755230320341}, {"name": "选择地址", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.JavascriptException: Message: javascript error: window.scollBy is not a function\n  (Session info: chrome=114.0.5735.110)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x0069A813+48355]\n\t(No symbol) [0x0062C4B1]\n\t(No symbol) [0x00535358]\n\t(No symbol) [0x005387A1]\n\t(No symbol) [0x0053A19B]\n\t(No symbol) [0x0058D279]\n\t(No symbol) [0x0057A73C]\n\t(No symbol) [0x0058C922]\n\t(No symbol) [0x0057A536]\n\t(No symbol) [0x005582DC]\n\t(No symbol) [0x005593DD]\n\tGetHandleVerifier [0x008FAABD+2539405]\n\tGetHandleVerifier [0x0093A78F+2800735]\n\tGetHandleVerifier [0x0093456C+2775612]\n\tGetHandleVerifier [0x007251E0+616112]\n\t(No symbol) [0x00635F8C]\n\t(No symbol) [0x00632328]\n\t(No symbol) [0x0063240B]\n\t(No symbol) [0x00624FF7]\n\tBaseThreadInitThunk [0x76537BA9+25]\n\tRtlInitializeExceptionChain [0x77DDC3AB+107]\n\tRtlClearBits [0x77DDC32F+191]\n\n", "trace": "  File \"D:\\123\\python_po\\test1\\test_address.py\", line 37, in test_login_success\n    address_page.click_address1()\n  File \"D:\\123\\python_po\\page1\\address_page.py\", line 32, in click_address1\n    self.driver.execute_script(\"window.scollBy(0,2000);\")\n  File \"C:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 491, in execute_script\n    return self.execute(command, {\n  File \"C:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 428, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 243, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1755230320341, "stop": 1755230320394}], "start": 1755230316916, "stop": 1755230320395, "uuid": "4b174a17-0229-40c6-b89c-a831d46ec09d", "historyId": "a3847e53d59f9b804772500823334bcf", "testCaseId": "a3847e53d59f9b804772500823334bcf", "fullName": "test1.test_address.TestLogin#test_login_success", "labels": [{"name": "feature", "value": "登录模块"}, {"name": "story", "value": "testcase01"}, {"name": "parentSuite", "value": "test1"}, {"name": "suite", "value": "test_address"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "LAPTOP-3QKJO3TT"}, {"name": "thread", "value": "1676-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test1.test_address"}]}